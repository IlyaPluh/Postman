{
	"info": {
		"_postman_id": "a7a6a148-df1d-400e-b5a4-f1cdd30b7242",
		"name": "HW2CSV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20997341"
	},
	"item": [
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). ",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!",
							"// Требования:",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное",
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.",
							"",
							"const age = pm.iterationData.get(\"age\")",
							"const name = pm.iterationData.get(\"name\")",
							"const salary = pm.iterationData.get(\"salary\")",
							"",
							"function ageValidation(value) {",
							"    return value && !isNaN(value) && value > 17 && value < 121 && Number.isInteger(+value)",
							"}",
							"function salaryValidation(value) {",
							"    return value && !isNaN(value) && value > 0 && value < 1000001 && Number.isInteger(+value)",
							"}",
							"function nameValidation(value) {",
							"    return value && value.length > 2 && value.length < 41 && value.trim() === value",
							"}",
							"",
							"function validate(name, age, salary) {",
							"    return ageValidation(age) && nameValidation(name) && salaryValidation(salary)",
							"}",
							"",
							"if(validate(name, age, salary)) {",
							"    pm.test(`200 code with age == ${age}, salary == ${salary}, name == ${name}`, () => {",
							"        pm.response.to.have.status(200)",
							"    })",
							"} else {",
							"    pm.test(`NOT 200 code with age == ${age}, salary == ${salary}, name == ${name}`, () => {",
							"        pm.response.to.not.have.status(200)",
							"    })",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2_csv",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.",
							"let statusCode = pm.iterationData.get(\"statusCode\")",
							"const csv = () => {",
							"    if(statusCode === 200) {",
							"        pm.test(\"Status code 200\", function () {",
							"            pm.response.to.have.status(200)",
							"        })",
							"    } else {",
							"        pm.test(`Status code ${pm.response.code}`, function() {",
							"            pm.response.to.have.status(200)",
							"        })",
							"    }",
							"}",
							"csv();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}