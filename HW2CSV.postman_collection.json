{
	"info": {
		"_postman_id": "a7a6a148-df1d-400e-b5a4-f1cdd30b7242",
		"name": "HW2CSV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20997341"
	},
	"item": [
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). ",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!",
							"// Требования:",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное",
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.",
							"//let req = request.data",
							"if (request.data.name.length >= 3 && request.data.name.length <= 40 && request.data.name[0] !== \" \" && request.data.name.slice(-1) !== \" \" && request.data.name !== \"\" && typeof(+request.data.age == \"number\") && request.data.age >= 18 && request.data.age <= 120 && Number.isInteger(+request.data.age) && +request.data.age !== \"\" && typeof(+request.data.salary == \"number\") && +request.data.salary >= 1 && request.data.salary <= 1000000 && Number.isInteger(+request.data.salary) && +request.data.salary !== \"\") {",
							"    pm.test(\"Successful\", function () {",
							"        pm.response.to.have.status(200)",
							"    })",
							"    }",
							"else {",
							"    if(!request.data.age.trim()) {",
							"        pm.test(\"Age fill\", function () {",
							"            pm.response.to.have.status(200)",
							"        })",
							"    }",
							"    // else if(typeof(+req.age) !== \"number\") {",
							"    //     pm.test(\"Age not a number\", function () {",
							"    //             pm.response.to.have.status(200)",
							"    //     })",
							"    // }",
							"    else if(!Number.isInteger(+request.data.age)) {",
							"        pm.test(\"Age not integer number\", function () {",
							"                pm.response.to.have.status(200)",
							"        })",
							"    }",
							"    else if(+request.data.age < 18) {",
							"        pm.test(\"Age younger\", function () {",
							"                pm.response.to.have.status(200)",
							"        })",
							"    }",
							"    else if(+request.data.age > 120) {",
							"        pm.test(\"Age older\", function () {",
							"                pm.response.to.have.status(200)",
							"        })",
							"    }",
							"    else if(!request.data.name.trim()) {",
							"            pm.test(\"Name fill\", function () {",
							"                pm.response.to.not.have.status(200)",
							"            })",
							"        }",
							"    else if(request.data.name.length < 3) {",
							"        pm.test(\"Name short\", function () {",
							"                pm.response.to.not.have.status(200)",
							"        })",
							"    }",
							"    else if(request.data.name.length > 40) {",
							"        pm.test(\"Name long\", function () {",
							"                pm.response.to.not.have.status(200)",
							"        })",
							"    }",
							"    else if(request.data.name.slice(0, 1) == \" \") {",
							"    pm.test(\"Space in begin name\", function () {",
							"        pm.response.to.not.have.status(200)",
							"        })",
							"    }  ",
							"    else if(request.data.name.slice(-1) == \" \") {",
							"        pm.test(\"Space in end name\", function () {",
							"                pm.response.to.not.have.status(200)",
							"        })",
							"    }              ",
							"    else if(!request.data.salary.trim()) {",
							"        pm.test(\"Salary fill\", function () {",
							"                pm.response.to.have.status(200)",
							"        })",
							"    }    ",
							"    // else if(typeof(+req.salary) !== \"number\") {",
							"    //     pm.test(\"Salary not a number\", function () {",
							"    //             pm.response.to.have.status(200)",
							"    //     })",
							"    // }    ",
							"    else if(!Number.isInteger(+request.data.salary)) {",
							"        pm.test(\"Salary not integer number\", function () {",
							"                pm.response.to.have.status(200)",
							"        })",
							"    }",
							"    else if(+request.data.salary < 1) {",
							"        pm.test(\"Salary small\", function () {",
							"                pm.response.to.have.status(200)",
							"        })",
							"    }",
							"    else if(+request.data.salary > 1000000) {",
							"        pm.test(\"Salary big\", function () {",
							"                pm.response.to.have.status(200)",
							"        })",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2_csv",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.",
							"let statusCode = pm.iterationData.get(\"statusCode\")",
							"const csv = () => {",
							"    if(statusCode === 200) {",
							"        pm.test(\"Status code 200\", function () {",
							"            pm.response.to.have.status(200)",
							"        })",
							"    } else {",
							"        pm.test(`Status code ${pm.response.code}`, function() {",
							"            pm.response.to.have.status(200)",
							"        })",
							"    }",
							"}",
							"csv();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}