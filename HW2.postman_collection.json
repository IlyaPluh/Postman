{
	"info": {
		"_postman_id": "60048dbc-d76b-4ada-a967-4b5a6a332db2",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20997341"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить, что в body приходит правильный string",
							"pm.test(\"Check string\", function () {",
							"//     pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"pm.response.to.have.body(\"This is the first responce from server!\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.",
							"let jsonData = pm.response.json()",
							"//Проверить, что name в ответе равно name s request name вбить руками",
							"pm.test(\"Name1\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"IlyaA\");",
							"});",
							"//Проверить, что age в ответе равно age s request age вбить руками",
							"pm.test(\"Age1\", function () {",
							"    pm.expect(jsonData.age).to.eql(\"33\");",
							"});",
							"//Проверить, что salary в ответе равно salary s request salary вбить руками",
							"pm.test(\"Salary1\", function () {",
							"    pm.expect(jsonData.salary).to.eql(3000);",
							"});",
							"//Спарсить request",
							"let req = request.data",
							"//Проверить, что name в ответе равно name s request name забрать из request",
							"//let req_name = req.name",
							"pm.test(\"Name2\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"//роверить, что age в ответе равно age s request age забрать из request",
							"//let req_age = req.age",
							"pm.test(\"Age2\", function () {",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"//Проверить, что salary в ответе равно salary s request salary забрать из request",
							"//let req_salary = req.salary",
							"pm.test(\"Salary2\", function () {",
							"    pm.expect(JSON.stringify(jsonData.salary)).to.eql(req.salary);",
							"});",
							"//Вывести в консоль параметр family из response",
							"console.log(jsonData.family)",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 salary забрать из request",
							"pm.test(\"Salary1_5_x4\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary * 4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json",
							"let jsonData = pm.response.json()",
							"//Спарсить request",
							"let req = pm.request.url.query.toObject()",
							"//Проверить, что name в ответе равно name s request name забрать из request",
							"pm.test(\"Name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"//проверить, что age в ответе равно age s request age забрать из request",
							"pm.test(\"Age\", function () {",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"//роверить, что salary в ответе равно salary s request salary забрать из request",
							"pm.test(\"Salary\", function () {",
							"    pm.expect(JSON.stringify(jsonData.salary)).to.eql(req.salary);",
							"});",
							"//Вывести в консоль параметр family из response",
							"console.log(jsonData.family)",
							"//Проверить, что у параметра dog есть параметры name",
							"pm.test(\"Check dog have name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"//Проверить, что у параметра dog есть параметры age",
							"pm.test(\"Check dog have age\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"//Проверить, что параметр name имеет значение Luky",
							"pm.test(\"Dog name\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"//Проверить, что параметр age имеет значение 4",
							"pm.test(\"Dog age\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json",
							"let jsonData = pm.response.json()",
							"//Спарсить request",
							"let req = pm.request.url.query.toObject()",
							"//Проверить, что name в ответе равно name s request (name забрать из request",
							"pm.test(\"Name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"//Проверить, что age в ответе равно age из request (age забрать из request",
							"pm.test(\"Age\", function () {",
							"    pm.expect(JSON.stringify(jsonData.age)).to.eql(req.age);",
							"});",
							"//Вывести в консоль параметр salary из request",
							"console.log(req.salary)",
							"//Вывести в консоль параметр salary из response",
							"console.log(jsonData.salary)",
							"//Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(jsonData.salary[0])",
							"//Вывести в консоль 1-й элемент параметра salary из response",
							"console.log(jsonData.salary[1])",
							"//Вывести в консоль 2-й элемент параметра salary из response",
							"console.log(jsonData.salary[2])",
							"//Проверить, что 0-й элемент параметра salary равен salary из request salary забрать из request",
							"pm.test(\"Salary 0\", function () {",
							"    pm.expect(JSON.stringify(jsonData.salary[0])).to.eql(req.salary);",
							"});",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request salary забрать из request",
							"pm.test(\"Salary 1\", function () {",
							"    pm.expect(jsonData.salary[1]).to.eql(JSON.stringify(req.salary * 2));",
							"});",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request salary забрать из request",
							"pm.test(\"Salary 2\", function () {",
							"    pm.expect(jsonData.salary[2]).to.eql(JSON.stringify(req.salary * 3));",
							"});",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary",
							"// for (let i=0; i < jsonData.salary.length; i++) console.log(jsonData.salary[i])",
							"jsonData.salary.forEach(el => console.log(el))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.",
							"let jsonData = pm.response.json()",
							"//Спарсить request.",
							"let req = request.data",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Check salary2\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"Check person\", function () {",
							"    pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"//Проверить, что параметр start_qa_salary равен salary из request ( salary забрать из request)",
							"pm.test(\"Salary\", function () {",
							"    pm.expect(String(jsonData.start_qa_salary)).to.eql(req.salary);",
							"});",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)",
							"pm.test(\"Salary_3_5\", function () {",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary * 3.8);",
							"});",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request)",
							"pm.test(\"Age\", function () {",
							"    pm.expect(String(jsonData.person.u_age)).to.eql(req.age);",
							"});",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)",
							"pm.test(\"Salary_5\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary * 4.2);",
							"});",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person",
							"for (let el in jsonData.person) console.log(el +\" \"+ jsonData.person[el]);",
							"//Добавить переменную в окружение",
							"pm.environment.set(\"Test\", \"Hello\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4_extra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary",
							"let jsonData = pm.response.json()",
							"let req = pm.request.url.query.toObject()",
							"// for (let i=0; i<jsonData.salary.length; i++) {",
							"//     pm.test(`${req.salary} * ${i+1} from request = ${jsonData.salary[i]} from response`, function () {",
							"//         pm.expect(Number(jsonData.salary[i])).to.eql(Number(req.salary)*(i+1));",
							"//     })",
							"// }",
							"jsonData.salary.forEach((el, i) => {pm.test(`${req.salary} * ${i+1} from request = ${jsonData.salary[i]} from response`, function () {",
							"    pm.expect(+el).to.eql((i+1)*req.salary)",
							"})})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3_extra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить, что name в ответе равно name s request (name забрать из request.) Проверить, что age в ответе равно age s request (age забрать из request.) Проверить, что salary в ответе равно salary s request (salary забрать из request.) Глубокое сравнение без циклов. 1 тест",
							"let jsonData = pm.response.json()",
							"let req = pm.request.url.query.toObject()",
							"pm.test(\"Age, name, salary\", function () {",
							"    pm.expect(jsonData.toObject).to.eql(req.toObject);",
							"    //pm.expect(jsonData.name).to.eql(req.name);",
							"    //pm.expect(jsonData.salary).to.eql(+req.salary);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2_extra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()",
							"let req = request.data",
							"//Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)",
							"// for (let key in jsonData) {",
							"//     pm.test(`Response property have ${key}`, function () {",
							"//         pm.expect(jsonData).to.have.property(key)",
							"//     })}",
							"//Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)",
							"// let kof = [3.3, 2.7, 3.8, 2, 1]",
							"// let i=0",
							"// for (let key in jsonData) {",
							"//     if (key.includes('salary')) {",
							"//         //let kof = jsonData[key]/+req.salary",
							"//         pm.test(`Check ${key} value`, function () {",
							"//             console.log(kof[i])",
							"//             pm.expect(jsonData[key]).to.eql(+req.salary*kof[i])",
							"//             i++",
							"// })}}",
							"",
							"//Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста",
							"let kof = [3.3, 2.7, 3.8, 2, 1]",
							"let i=0",
							"for (let key in jsonData) {",
							"    if (key.includes('salary')) {",
							"        //let kof = jsonData[key]/+req.salary",
							"        pm.test(`Check ${key} value`, function () {",
							"            console.log(kof[i])",
							"            pm.expect(jsonData[key]).to.eql(+req.salary*kof[i])",
							"            i++",
							"})}",
							"    pm.test(`Response property have ${key}`, function () {",
							"        pm.expect(jsonData).to.have.property(key)",
							"    })}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}